{
  "options": {},
  "name": "sdk-proxy-fxp",
  "test_cases": [
    {
      "id": 1,
      "name": "Proxy-FXP Transfer Happy Path",
      "meta": {
        "info": "Proxy-FXP Transfer Happy Path"
      },
      "requests": [
        {
          "id": 1,
          "description": "Send transfer",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 2,
            "type": "mojaloop_connector_outbound",
            "asynchronous": true
          },
          "operationPath": "/transfers",
          "path": "/transfers",
          "method": "post",
          "body": {
            "homeTransactionId": "{$inputs.HOME_TRANSACTION_ID}",
            "from": {
              "type": "CONSUMER",
              "idType": "MSISDN",
              "idValue": "{$inputs.P2P_SOURCE_PARTY_ID_1}",
              "displayName": "{$inputs.FROM_DISPLAY_NAME}",
              "firstName": "{$inputs.FROM_FIRST_NAME}",
              "middleName": "{$inputs.FROM_MIDDLE_NAME}",
              "lastName": "{$inputs.FROM_LAST_NAME}",
              "dateOfBirth": "{$inputs.FROM_DOB}",
              "fspId": "{$inputs.FROM_FSP_ID}"
            },
            "to": {
              "type": "CONSUMER",
              "idType": "MSISDN",
              "idValue": "{$inputs.FX_DESTINATION_PARTY_ID_1}",
              "merchantClassificationCode": 123
            },
            "amountType": "SEND",
            "currency": "{$inputs.P2P_CURRENCY}",
            "amount": "{$inputs.P2P_AMOUNT}",
            "transactionType": "TRANSFER",
            "note": "{$inputs.NOTE}",
            "skipPartyLookup": false
          },
          "params": {
            "Type": "",
            "ID": ""
          },
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Status is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": 2,
                "description": "Current state should be WAITING_FOR_PARTY_ACCEPTANCE",
                "exec": [
                  "expect(response.body.currentState).to.equal('WAITING_FOR_PARTY_ACCEPTANCE')"
                ]
              }
            ]
          }
        },
        {
          "id": 2,
          "description": "Accept Party",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 2,
            "type": "mojaloop_connector_outbound",
            "asynchronous": false
          },
          "operationPath": "/transfers/{transferId}",
          "path": "/transfers/{$prev.1.response.body.transferId}",
          "method": "put",
          "params": {
            "transferId": "{$prev.1.response.body.transferId}"
          },
          "body": {
            "acceptParty": true
          },
          "disabled": false,
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Status is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": 2,
                "description": "Current state should be WAITING_FOR_CONVERSION_ACCEPTANCE",
                "exec": [
                  "expect(response.body.currentState).to.equal('WAITING_FOR_CONVERSION_ACCEPTANCE')"
                ]
              }
            ]
          }
        },
        {
          "id": 3,
          "description": "Accept FX Conversion Quote",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 2,
            "type": "mojaloop_connector_outbound",
            "asynchronous": false
          },
          "operationPath": "/transfers/{transferId}",
          "path": "/transfers/{$prev.1.response.body.transferId}",
          "method": "put",
          "params": {
            "transferId": "{$prev.1.response.body.transferId}"
          },
          "body": {
            "acceptConversion": true
          },
          "disabled": false,
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Status is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": 2,
                "description": "Current state should be WAITING_FOR_QUOTE_ACCEPTANCE",
                "exec": [
                  "expect(response.body.currentState).to.equal('WAITING_FOR_QUOTE_ACCEPTANCE')"
                ]
              }
            ]
          }
        },
        {
          "id": 4,
          "description": "Accept Quote",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 2,
            "type": "mojaloop_connector_outbound",
            "asynchronous": false
          },
          "operationPath": "/transfers/{transferId}",
          "path": "/transfers/{$prev.1.response.body.transferId}",
          "method": "put",
          "params": {
            "transferId": "{$prev.1.response.body.transferId}"
          },
          "body": {
            "acceptQuote": true
          },
          "disabled": false,
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Status is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": 2,
                "description": "Current state should be COMPLETED",
                "exec": [
                  "expect(response.body.currentState).to.equal('COMPLETED')"
                ]
              }
            ]
          }
        }
      ]
    },
    {
      "id": 2,
      "name": "Insufficient Funds for payerfsp",
      "meta": {
        "info": "Insufficient Funds for payerfsp"
      },
      "requests": [
        {
          "id": 1,
          "description": "Send transfer",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 2,
            "type": "mojaloop_connector_outbound",
            "asynchronous": true
          },
          "operationPath": "/transfers",
          "path": "/transfers",
          "method": "post",
          "body": {
            "homeTransactionId": "{$inputs.HOME_TRANSACTION_ID}",
            "from": {
              "type": "CONSUMER",
              "idType": "MSISDN",
              "idValue": "{$inputs.P2P_SOURCE_PARTY_ID_1}",
              "displayName": "{$inputs.FROM_DISPLAY_NAME}",
              "firstName": "{$inputs.FROM_FIRST_NAME}",
              "middleName": "{$inputs.FROM_MIDDLE_NAME}",
              "lastName": "{$inputs.FROM_LAST_NAME}",
              "dateOfBirth": "{$inputs.FROM_DOB}",
              "fspId": "{$inputs.FROM_FSP_ID}"
            },
            "to": {
              "type": "CONSUMER",
              "idType": "MSISDN",
              "idValue": "{$inputs.FX_DESTINATION_PARTY_ID_1}",
              "merchantClassificationCode": 123
            },
            "amountType": "SEND",
            "currency": "{$inputs.P2P_CURRENCY}",
            "amount": "{$inputs.NDC_EXCEEDED_AMOUNT_PAYERFSP}",
            "transactionType": "TRANSFER",
            "note": "{$inputs.NOTE}",
            "skipPartyLookup": false
          },
          "params": {
            "Type": "",
            "ID": ""
          },
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Status is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": 2,
                "description": "Current state should be WAITING_FOR_PARTY_ACCEPTANCE",
                "exec": [
                  "expect(response.body.currentState).to.equal('WAITING_FOR_PARTY_ACCEPTANCE')"
                ]
              }
            ]
          }
        },
        {
          "id": 2,
          "description": "Accept Party",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 2,
            "type": "mojaloop_connector_outbound",
            "asynchronous": false
          },
          "operationPath": "/transfers/{transferId}",
          "path": "/transfers/{$prev.1.response.body.transferId}",
          "method": "put",
          "params": {
            "transferId": "{$prev.1.response.body.transferId}"
          },
          "body": {
            "acceptParty": true
          },
          "disabled": false,
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Status is 500",
                "exec": [
                  "expect(response.status).to.equal(500)"
                ]
              },
              {
                "id": 2,
                "description": "Last Status Code should be 500",
                "exec": [
                  "expect(response.body.transferState.lastError.httpStatusCode).to.equal(500)"
                ]
              },
              {
                "id": 3,
                "description": "Error Code should be 4200",
                "exec": [
                  "expect(response.body.transferState.lastError.mojaloopError.errorInformation.errorCode).to.equal('4200')"
                ]
              },
              {
                "id": 4,
                "description": "Error description should be Payer Limit Error",
                "exec": [
                  "expect(response.body.transferState.lastError.mojaloopError.errorInformation.errorDescription).to.equal('Payer Limit Error')"
                ]
              }
            ]
          }
        }
      ]
    },
    {
      "id": 3,
      "name": "Insufficient Funds for regional scheme payer proxy account",
      "meta": {
        "info": "Insufficient Funds for regional scheme payer proxy account"
      },
      "requests": [
        {
          "id": 1,
          "description": "Send transfer",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 2,
            "type": "mojaloop_connector_outbound",
            "asynchronous": true
          },
          "operationPath": "/transfers",
          "path": "/transfers",
          "method": "post",
          "body": {
            "homeTransactionId": "{$inputs.HOME_TRANSACTION_ID}",
            "from": {
              "type": "CONSUMER",
              "idType": "MSISDN",
              "idValue": "{$inputs.P2P_SOURCE_PARTY_ID_1}",
              "displayName": "{$inputs.FROM_DISPLAY_NAME}",
              "firstName": "{$inputs.FROM_FIRST_NAME}",
              "middleName": "{$inputs.FROM_MIDDLE_NAME}",
              "lastName": "{$inputs.FROM_LAST_NAME}",
              "dateOfBirth": "{$inputs.FROM_DOB}",
              "fspId": "{$inputs.FROM_FSP_ID}"
            },
            "to": {
              "type": "CONSUMER",
              "idType": "MSISDN",
              "idValue": "{$inputs.FX_DESTINATION_PARTY_ID_1}",
              "merchantClassificationCode": 123
            },
            "amountType": "SEND",
            "currency": "{$inputs.P2P_CURRENCY}",
            "amount": "{$inputs.NDC_EXCEEDED_AMOUNT_PAYER_PROXY_IN_REGIONAL_HUB}",
            "transactionType": "TRANSFER",
            "note": "{$inputs.NOTE}",
            "skipPartyLookup": false
          },
          "params": {
            "Type": "",
            "ID": ""
          },
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Status is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": 2,
                "description": "Current state should be WAITING_FOR_PARTY_ACCEPTANCE",
                "exec": [
                  "expect(response.body.currentState).to.equal('WAITING_FOR_PARTY_ACCEPTANCE')"
                ]
              }
            ]
          }
        },
        {
          "id": 2,
          "description": "Accept Party",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 2,
            "type": "mojaloop_connector_outbound",
            "asynchronous": false
          },
          "operationPath": "/transfers/{transferId}",
          "path": "/transfers/{$prev.1.response.body.transferId}",
          "method": "put",
          "params": {
            "transferId": "{$prev.1.response.body.transferId}"
          },
          "body": {
            "acceptParty": true
          },
          "disabled": false,
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Status is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": 2,
                "description": "Current state should be WAITING_FOR_CONVERSION_ACCEPTANCE",
                "exec": [
                  "expect(response.body.currentState).to.equal('WAITING_FOR_CONVERSION_ACCEPTANCE')"
                ]
              }
            ]
          }
        },
        {
          "id": 3,
          "description": "Accept FX Conversion Quote",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 2,
            "type": "mojaloop_connector_outbound",
            "asynchronous": false
          },
          "operationPath": "/transfers/{transferId}",
          "path": "/transfers/{$prev.1.response.body.transferId}",
          "method": "put",
          "params": {
            "transferId": "{$prev.1.response.body.transferId}"
          },
          "body": {
            "acceptConversion": true
          },
          "disabled": false,
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Status is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": 2,
                "description": "Current state should be WAITING_FOR_QUOTE_ACCEPTANCE",
                "exec": [
                  "expect(response.body.currentState).to.equal('WAITING_FOR_QUOTE_ACCEPTANCE')"
                ]
              }
            ]
          }
        },
        {
          "id": 4,
          "description": "Accept Quote",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 2,
            "type": "mojaloop_connector_outbound",
            "asynchronous": false
          },
          "operationPath": "/transfers/{transferId}",
          "path": "/transfers/{$prev.1.response.body.transferId}",
          "method": "put",
          "params": {
            "transferId": "{$prev.1.response.body.transferId}"
          },
          "body": {
            "acceptQuote": true
          },
          "disabled": false,
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Status is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": 2,
                "description": "NDC Limit error should be returned",
                "exec": [
                  "expect(response.body.errorInformation.errorDescription).to.equal('NDC Limit Error')"
                ]
              }
            ]
          }
        }
      ]
    },
    {
      "id": 4,
      "name": "Insufficient Funds for FXP, in target currency",
      "meta": {
        "info": "Insufficient Funds for FXP, in target currency"
      },
      "requests": [
        {
          "id": 1,
          "description": "Send transfer",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 2,
            "type": "mojaloop_connector_outbound",
            "asynchronous": true
          },
          "url": "{$inputs.FROM_SDK_OUTBOUND_URL}",
          "operationPath": "/transfers",
          "path": "/transfers",
          "method": "post",
          "body": {
            "homeTransactionId": "{$inputs.HOME_TRANSACTION_ID}",
            "from": {
              "type": "CONSUMER",
              "idType": "MSISDN",
              "idValue": "{$inputs.P2P_SOURCE_PARTY_ID_1}",
              "displayName": "{$inputs.FROM_DISPLAY_NAME}",
              "firstName": "{$inputs.FROM_FIRST_NAME}",
              "middleName": "{$inputs.FROM_MIDDLE_NAME}",
              "lastName": "{$inputs.FROM_LAST_NAME}",
              "dateOfBirth": "{$inputs.FROM_DOB}",
              "fspId": "{$inputs.FROM_FSP_ID}"
            },
            "to": {
              "type": "CONSUMER",
              "idType": "MSISDN",
              "idValue": "{$inputs.FX_DESTINATION_PARTY_ID_1}",
              "merchantClassificationCode": 123
            },
            "amountType": "SEND",
            "currency": "{$inputs.P2P_CURRENCY}",
            "amount": "{$inputs.NDC_EXCEEDED_AMOUNT_PAYER_PROXY}",
            "transactionType": "TRANSFER",
            "note": "{$inputs.NOTE}",
            "skipPartyLookup": false
          },
          "params": {
            "Type": "",
            "ID": ""
          },
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Status is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": 2,
                "description": "Current state should be WAITING_FOR_PARTY_ACCEPTANCE",
                "exec": [
                  "expect(response.body.currentState).to.equal('WAITING_FOR_PARTY_ACCEPTANCE')"
                ]
              }
            ]
          }
        },
        {
          "id": 2,
          "description": "Accept Party",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 2,
            "type": "mojaloop_connector_outbound",
            "asynchronous": false
          },
          "operationPath": "/transfers/{transferId}",
          "path": "/transfers/{$prev.1.response.body.transferId}",
          "method": "put",
          "params": {
            "transferId": "{$prev.1.response.body.transferId}"
          },
          "body": {
            "acceptParty": true
          },
          "disabled": false,
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Status is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": 2,
                "description": "Current state should be WAITING_FOR_CONVERSION_ACCEPTANCE",
                "exec": [
                  "expect(response.body.currentState).to.equal('WAITING_FOR_CONVERSION_ACCEPTANCE')"
                ]
              }
            ]
          }
        },
        {
          "id": 3,
          "description": "Accept FX Conversion Quote",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 2,
            "type": "mojaloop_connector_outbound",
            "asynchronous": false
          },
          "operationPath": "/transfers/{transferId}",
          "path": "/transfers/{$prev.1.response.body.transferId}",
          "method": "put",
          "params": {
            "transferId": "{$prev.1.response.body.transferId}"
          },
          "body": {
            "acceptConversion": true
          },
          "disabled": false,
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Status is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": 2,
                "description": "Current state should be WAITING_FOR_QUOTE_ACCEPTANCE",
                "exec": [
                  "expect(response.body.currentState).to.equal('WAITING_FOR_QUOTE_ACCEPTANCE')"
                ]
              }
            ]
          }
        },
        {
          "id": 4,
          "description": "Accept Quote",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 2,
            "type": "mojaloop_connector_outbound",
            "asynchronous": false
          },
          "operationPath": "/transfers/{transferId}",
          "path": "/transfers/{$prev.1.response.body.transferId}",
          "method": "put",
          "params": {
            "transferId": "{$prev.1.response.body.transferId}"
          },
          "body": {
            "acceptQuote": true
          },
          "disabled": false,
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Status is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": 2,
                "description": "NDC Limit error should be returned",
                "exec": [
                  "expect(response.body.errorInformation.errorDescription).to.equal('NDC Limit Error')"
                ]
              }
            ]
          }
        }
      ]
    },
    {
      "id": 5,
      "name": "Insufficient funds for payee scheme’s proxy",
      "meta": {
        "info": "Insufficient funds for payee scheme’s proxy"
      },
      "requests": [
        {
          "id": 1,
          "description": "Send transfer",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 2,
            "type": "mojaloop_connector_outbound",
            "asynchronous": true
          },
          "url": "{$inputs.FROM_SDK_OUTBOUND_URL}",
          "operationPath": "/transfers",
          "path": "/transfers",
          "method": "post",
          "body": {
            "homeTransactionId": "{$inputs.HOME_TRANSACTION_ID}",
            "from": {
              "type": "CONSUMER",
              "idType": "MSISDN",
              "idValue": "{$inputs.P2P_SOURCE_PARTY_ID_1}",
              "displayName": "{$inputs.FROM_DISPLAY_NAME}",
              "firstName": "{$inputs.FROM_FIRST_NAME}",
              "middleName": "{$inputs.FROM_MIDDLE_NAME}",
              "lastName": "{$inputs.FROM_LAST_NAME}",
              "dateOfBirth": "{$inputs.FROM_DOB}",
              "fspId": "{$inputs.FROM_FSP_ID}"
            },
            "to": {
              "type": "CONSUMER",
              "idType": "MSISDN",
              "idValue": "{$inputs.FX_DESTINATION_PARTY_ID_1}",
              "merchantClassificationCode": 123
            },
            "amountType": "SEND",
            "currency": "{$inputs.P2P_CURRENCY}",
            "amount": "{$inputs.NDC_EXCEEDED_AMOUNT_PAYER_PROXY}",
            "transactionType": "TRANSFER",
            "note": "{$inputs.NOTE}",
            "skipPartyLookup": false
          },
          "params": {
            "Type": "",
            "ID": ""
          },
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Status is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": 2,
                "description": "Current state should be WAITING_FOR_PARTY_ACCEPTANCE",
                "exec": [
                  "expect(response.body.currentState).to.equal('WAITING_FOR_PARTY_ACCEPTANCE')"
                ]
              }
            ]
          }
        },
        {
          "id": 2,
          "description": "Accept Party",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 2,
            "type": "mojaloop_connector_outbound",
            "asynchronous": false
          },
          "operationPath": "/transfers/{transferId}",
          "path": "/transfers/{$prev.1.response.body.transferId}",
          "method": "put",
          "params": {
            "transferId": "{$prev.1.response.body.transferId}"
          },
          "body": {
            "acceptParty": true
          },
          "disabled": false,
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Status is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": 2,
                "description": "Current state should be WAITING_FOR_CONVERSION_ACCEPTANCE",
                "exec": [
                  "expect(response.body.currentState).to.equal('WAITING_FOR_CONVERSION_ACCEPTANCE')"
                ]
              }
            ]
          }
        },
        {
          "id": 3,
          "description": "Accept FX Conversion Quote",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 2,
            "type": "mojaloop_connector_outbound",
            "asynchronous": false
          },
          "operationPath": "/transfers/{transferId}",
          "path": "/transfers/{$prev.1.response.body.transferId}",
          "method": "put",
          "params": {
            "transferId": "{$prev.1.response.body.transferId}"
          },
          "body": {
            "acceptConversion": true
          },
          "disabled": false,
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Status is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": 2,
                "description": "Current state should be WAITING_FOR_QUOTE_ACCEPTANCE",
                "exec": [
                  "expect(response.body.currentState).to.equal('WAITING_FOR_QUOTE_ACCEPTANCE')"
                ]
              }
            ]
          }
        },
        {
          "id": 4,
          "description": "Accept Quote",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 2,
            "type": "mojaloop_connector_outbound",
            "asynchronous": false
          },
          "operationPath": "/transfers/{transferId}",
          "path": "/transfers/{$prev.1.response.body.transferId}",
          "method": "put",
          "params": {
            "transferId": "{$prev.1.response.body.transferId}"
          },
          "body": {
            "acceptQuote": true
          },
          "disabled": false,
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Status is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": 2,
                "description": "NDC Limit error should be returned",
                "exec": [
                  "expect(response.body.errorInformation.errorDescription).to.equal('NDC Limit Error')"
                ]
              }
            ]
          }
        }
      ]
    },
    {
      "id": 6,
      "name": "Timeout in payer scheme on PUT /transfers ",
      "meta": {
        "info": "Timeout in payer scheme on PUT /transfers "
      },
      "requests": [
        {
          "id": 1,
          "description": "Send transfer",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 2,
            "type": "mojaloop_connector_outbound",
            "asynchronous": true
          },
          "operationPath": "/transfers",
          "path": "/transfers",
          "method": "post",
          "body": {
            "homeTransactionId": "{$inputs.HOME_TRANSACTION_ID}",
            "from": {
              "type": "CONSUMER",
              "idType": "MSISDN",
              "idValue": "{$inputs.P2P_SOURCE_PARTY_ID_1}",
              "displayName": "{$inputs.FROM_DISPLAY_NAME}",
              "firstName": "{$inputs.FROM_FIRST_NAME}",
              "middleName": "{$inputs.FROM_MIDDLE_NAME}",
              "lastName": "{$inputs.FROM_LAST_NAME}",
              "dateOfBirth": "{$inputs.FROM_DOB}",
              "fspId": "{$inputs.FROM_FSP_ID}"
            },
            "to": {
              "type": "CONSUMER",
              "idType": "MSISDN",
              "idValue": "{$inputs.PAYER_SCHEME_TIMEOUT_MSISDN}",
              "merchantClassificationCode": 123
            },
            "amountType": "SEND",
            "currency": "{$inputs.P2P_CURRENCY}",
            "amount": "{$inputs.P2P_AMOUNT}",
            "transactionType": "TRANSFER",
            "note": "{$inputs.NOTE}",
            "skipPartyLookup": false
          },
          "params": {
            "Type": "",
            "ID": ""
          },
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Status is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": 2,
                "description": "Current state should be WAITING_FOR_PARTY_ACCEPTANCE",
                "exec": [
                  "expect(response.body.currentState).to.equal('WAITING_FOR_PARTY_ACCEPTANCE')"
                ]
              }
            ]
          }
        },
        {
          "id": 2,
          "description": "Accept Party",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 2,
            "type": "mojaloop_connector_outbound",
            "asynchronous": false
          },
          "operationPath": "/transfers/{transferId}",
          "path": "/transfers/{$prev.1.response.body.transferId}",
          "method": "put",
          "params": {
            "transferId": "{$prev.1.response.body.transferId}"
          },
          "body": {
            "acceptParty": true
          },
          "disabled": false,
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Status is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": 2,
                "description": "Current state should be WAITING_FOR_CONVERSION_ACCEPTANCE",
                "exec": [
                  "expect(response.body.currentState).to.equal('WAITING_FOR_CONVERSION_ACCEPTANCE')"
                ]
              }
            ]
          }
        },
        {
          "id": 3,
          "description": "Accept FX Conversion Quote",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 2,
            "type": "mojaloop_connector_outbound",
            "asynchronous": false
          },
          "operationPath": "/transfers/{transferId}",
          "path": "/transfers/{$prev.1.response.body.transferId}",
          "method": "put",
          "params": {
            "transferId": "{$prev.1.response.body.transferId}"
          },
          "body": {
            "acceptConversion": true
          },
          "disabled": false,
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Status is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": 2,
                "description": "Current state should be WAITING_FOR_QUOTE_ACCEPTANCE",
                "exec": [
                  "expect(response.body.currentState).to.equal('WAITING_FOR_QUOTE_ACCEPTANCE')"
                ]
              }
            ]
          }
        },
        {
          "id": 4,
          "description": "Accept Quote",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 2,
            "type": "mojaloop_connector_outbound",
            "asynchronous": false
          },
          "operationPath": "/transfers/{transferId}",
          "path": "/transfers/{$prev.1.response.body.transferId}",
          "method": "put",
          "params": {
            "transferId": "{$prev.1.response.body.transferId}"
          },
          "body": {
            "acceptQuote": true
          },
          "disabled": false,
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Status is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": 2,
                "description": "NDC Limit error should be returned",
                "exec": [
                  "expect(response.body.errorInformation.errorDescription).to.equal('NDC Limit Error')"
                ]
              }
            ]
          }
        }
      ]
    },
    {
      "id": 7,
      "name": "Timeout in Regional scheme on PUT /transfers",
      "meta": {
        "info": "Timeout in Regional scheme on POST/fxTransfers"
      },
      "requests": [
        {
          "id": 1,
          "description": "Send transfer",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 2,
            "type": "mojaloop_connector_outbound",
            "asynchronous": true
          },
          "operationPath": "/transfers",
          "path": "/transfers",
          "method": "post",
          "body": {
            "homeTransactionId": "{$inputs.HOME_TRANSACTION_ID}",
            "from": {
              "type": "CONSUMER",
              "idType": "MSISDN",
              "idValue": "{$inputs.P2P_SOURCE_PARTY_ID_1}",
              "displayName": "{$inputs.FROM_DISPLAY_NAME}",
              "firstName": "{$inputs.FROM_FIRST_NAME}",
              "middleName": "{$inputs.FROM_MIDDLE_NAME}",
              "lastName": "{$inputs.FROM_LAST_NAME}",
              "dateOfBirth": "{$inputs.FROM_DOB}",
              "fspId": "{$inputs.FROM_FSP_ID}"
            },
            "to": {
              "type": "CONSUMER",
              "idType": "MSISDN",
              "idValue": "{$inputs.REGIONAL_SCHEME_TIMEOUT_MSISDN}",
              "merchantClassificationCode": 123
            },
            "amountType": "SEND",
            "currency": "{$inputs.P2P_CURRENCY}",
            "amount": "{$inputs.P2P_AMOUNT}",
            "transactionType": "TRANSFER",
            "note": "{$inputs.NOTE}",
            "skipPartyLookup": false
          },
          "params": {
            "Type": "",
            "ID": ""
          },
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Status is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": 2,
                "description": "Current state should be WAITING_FOR_PARTY_ACCEPTANCE",
                "exec": [
                  "expect(response.body.currentState).to.equal('WAITING_FOR_PARTY_ACCEPTANCE')"
                ]
              }
            ]
          }
        },
        {
          "id": 2,
          "description": "Accept Party",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 2,
            "type": "mojaloop_connector_outbound",
            "asynchronous": false
          },
          "operationPath": "/transfers/{transferId}",
          "path": "/transfers/{$prev.1.response.body.transferId}",
          "method": "put",
          "params": {
            "transferId": "{$prev.1.response.body.transferId}"
          },
          "body": {
            "acceptParty": true
          },
          "disabled": false,
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Status is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": 2,
                "description": "Current state should be WAITING_FOR_CONVERSION_ACCEPTANCE",
                "exec": [
                  "expect(response.body.currentState).to.equal('WAITING_FOR_CONVERSION_ACCEPTANCE')"
                ]
              }
            ]
          }
        },
        {
          "id": 3,
          "description": "Accept FX Conversion Quote",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 2,
            "type": "mojaloop_connector_outbound",
            "asynchronous": false
          },
          "operationPath": "/transfers/{transferId}",
          "path": "/transfers/{$prev.1.response.body.transferId}",
          "method": "put",
          "params": {
            "transferId": "{$prev.1.response.body.transferId}"
          },
          "body": {
            "acceptConversion": true
          },
          "disabled": false,
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Status is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": 2,
                "description": "Current state should be WAITING_FOR_QUOTE_ACCEPTANCE",
                "exec": [
                  "expect(response.body.currentState).to.equal('WAITING_FOR_QUOTE_ACCEPTANCE')"
                ]
              }
            ]
          }
        },
        {
          "id": 4,
          "description": "Accept Quote",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 2,
            "type": "mojaloop_connector_outbound",
            "asynchronous": false
          },
          "operationPath": "/transfers/{transferId}",
          "path": "/transfers/{$prev.1.response.body.transferId}",
          "method": "put",
          "params": {
            "transferId": "{$prev.1.response.body.transferId}"
          },
          "body": {
            "acceptQuote": true
          },
          "disabled": false,
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Status is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": 2,
                "description": "NDC Limit error should be returned",
                "exec": [
                  "expect(response.body.errorInformation.errorDescription).to.equal('NDC Limit Error')"
                ]
              }
            ]
          }
        }
      ]
    },
    {
      "id": 8,
      "name": "Timeout in Payee scheme on PUT /transfers",
      "meta": {
        "info": "Timeout in Payee scheme on POST/fxTransfers"
      },
      "requests": [
        {
          "id": 1,
          "description": "Send transfer",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 2,
            "type": "mojaloop_connector_outbound",
            "asynchronous": true
          },
          "operationPath": "/transfers",
          "path": "/transfers",
          "method": "post",
          "body": {
            "homeTransactionId": "{$inputs.HOME_TRANSACTION_ID}",
            "from": {
              "type": "CONSUMER",
              "idType": "MSISDN",
              "idValue": "{$inputs.P2P_SOURCE_PARTY_ID_1}",
              "displayName": "{$inputs.FROM_DISPLAY_NAME}",
              "firstName": "{$inputs.FROM_FIRST_NAME}",
              "middleName": "{$inputs.FROM_MIDDLE_NAME}",
              "lastName": "{$inputs.FROM_LAST_NAME}",
              "dateOfBirth": "{$inputs.FROM_DOB}",
              "fspId": "{$inputs.FROM_FSP_ID}"
            },
            "to": {
              "type": "CONSUMER",
              "idType": "MSISDN",
              "idValue": "{$inputs.PAYEE_SCHEME_TIMEOUT_MSISDN}",
              "merchantClassificationCode": 123
            },
            "amountType": "SEND",
            "currency": "{$inputs.P2P_CURRENCY}",
            "amount": "{$inputs.P2P_AMOUNT}",
            "transactionType": "TRANSFER",
            "note": "{$inputs.NOTE}",
            "skipPartyLookup": false
          },
          "params": {
            "Type": "",
            "ID": ""
          },
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Status is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": 2,
                "description": "Current state should be WAITING_FOR_PARTY_ACCEPTANCE",
                "exec": [
                  "expect(response.body.currentState).to.equal('WAITING_FOR_PARTY_ACCEPTANCE')"
                ]
              }
            ]
          }
        },
        {
          "id": 2,
          "description": "Accept Party",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 2,
            "type": "mojaloop_connector_outbound",
            "asynchronous": false
          },
          "operationPath": "/transfers/{transferId}",
          "path": "/transfers/{$prev.1.response.body.transferId}",
          "method": "put",
          "params": {
            "transferId": "{$prev.1.response.body.transferId}"
          },
          "body": {
            "acceptParty": true
          },
          "disabled": false,
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Status is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": 2,
                "description": "Current state should be WAITING_FOR_CONVERSION_ACCEPTANCE",
                "exec": [
                  "expect(response.body.currentState).to.equal('WAITING_FOR_CONVERSION_ACCEPTANCE')"
                ]
              }
            ]
          }
        },
        {
          "id": 3,
          "description": "Accept FX Conversion Quote",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 2,
            "type": "mojaloop_connector_outbound",
            "asynchronous": false
          },
          "operationPath": "/transfers/{transferId}",
          "path": "/transfers/{$prev.1.response.body.transferId}",
          "method": "put",
          "params": {
            "transferId": "{$prev.1.response.body.transferId}"
          },
          "body": {
            "acceptConversion": true
          },
          "disabled": false,
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Status is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": 2,
                "description": "Current state should be WAITING_FOR_QUOTE_ACCEPTANCE",
                "exec": [
                  "expect(response.body.currentState).to.equal('WAITING_FOR_QUOTE_ACCEPTANCE')"
                ]
              }
            ]
          }
        },
        {
          "id": 4,
          "description": "Accept Quote",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 2,
            "type": "mojaloop_connector_outbound",
            "asynchronous": false
          },
          "operationPath": "/transfers/{transferId}",
          "path": "/transfers/{$prev.1.response.body.transferId}",
          "method": "put",
          "params": {
            "transferId": "{$prev.1.response.body.transferId}"
          },
          "body": {
            "acceptQuote": true
          },
          "disabled": false,
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Status is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": 2,
                "description": "NDC Limit error should be returned",
                "exec": [
                  "expect(response.body.errorInformation.errorDescription).to.equal('NDC Limit Error')"
                ]
              }
            ]
          }
        }
      ]
    }
  ]
}